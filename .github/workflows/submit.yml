name: Pre-submit tests

on:
  push:
    branches-ignore:
      - master
      - pr/*
  workflow_dispatch:
    inputs:
      platforms:
        description: "Platform(s) to execute on"
        required: true
        default: "Linux additional (hotspot only)"

jobs:
  prerequisites:
    name: Prerequisites
    runs-on: "ubuntu-20.04"
    outputs:
      should_run: ${{ steps.check_submit.outputs.should_run }}
      bundle_id: ${{ steps.check_bundle_id.outputs.bundle_id }}
      platform_linux_additional: ${{ steps.check_platforms.outputs.platform_linux_additional }}
      platform_linux_x64: ${{ steps.check_platforms.outputs.platform_linux_x64 }}
      dependencies: ${{ steps.check_deps.outputs.dependencies }}

    steps:
      - name: Check if submit tests should actually run depending on secrets and manual triggering
        id: check_submit
        run: echo "::set-output name=should_run::${{ github.event.inputs.platforms != '' || (!secrets.JDK_SUBMIT_FILTER || startsWith(github.ref, 'refs/heads/submit/')) }}"

      - name: Check which platforms should be included
        id: check_platforms
        run: |
          echo "::set-output name=platform_linux_additional::${{ contains(github.event.inputs.platforms, 'linux additional (hotspot only)') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux additional (hotspot only)'))) }}"
          echo "::set-output name=platform_linux_x64::${{ contains(github.event.inputs.platforms, 'linux x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux x64'))) }}"
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Determine unique bundle identifier
        id: check_bundle_id
        run: echo "::set-output name=bundle_id::${GITHUB_ACTOR}_${GITHUB_SHA:0:8}"
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Checkout the source
        uses: actions/checkout@v2
        with:
          path: jdk
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Determine versions and locations to be used for dependencies
        id: check_deps
        run: "echo ::set-output name=dependencies::`cat make/conf/version-numbers.conf make/conf/test-dependencies | sed -e '1i {' -e 's/#.*//g' -e 's/\"//g' -e 's/\\(.*\\)=\\(.*\\)/\"\\1\": \"\\2\",/g' -e '$s/,\\s\\{0,\\}$/\\}/'`"
        working-directory: jdk
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Print extracted dependencies to the log
        run: "echo '${{ steps.check_deps.outputs.dependencies }}'"
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Determine the jtreg ref to checkout
        run: "echo JTREG_REF=jtreg-${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_VERSION }}+${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_BUILD }} >> $GITHUB_ENV"
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Check if a jtreg image is present in the cache
        id: jtreg
        uses: actions/cache@v2
        with:
          path: ~/jtreg/
          key: jtreg-${{ env.JTREG_REF }}-v1
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Checkout the jtreg source
        uses: actions/checkout@v2
        with:
          repository: "openjdk/jtreg"
          ref: ${{ env.JTREG_REF }}
          path: jtreg
        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'

      - name: Build jtreg
        run: bash make/build.sh --jdk ${JAVA_HOME_8_X64}
        working-directory: jtreg
        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'

      - name: Move jtreg image to destination folder
        run: mv build/images/jtreg ~/
        working-directory: jtreg
        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'

      - name: Store jtreg for use by later steps
        uses: actions/upload-artifact@v2
        with:
          name: transient_jtreg_${{ steps.check_bundle_id.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.check_submit.outputs.should_run != 'false'

  linux_x64_build:
    name: Linux x64
    runs-on: "ubuntu-20.04"
    needs: prerequisites
    if: needs.prerequisites.outputs.should_run != 'false' && (needs.prerequisites.outputs.platform_linux_x64 != 'false' || needs.prerequisites.outputs.platform_linux_additional == 'true')

    strategy:
      fail-fast: false
      matrix:
        flavor:
          - build release
          - build debug
        include:
          - flavor: build debug
            flags: --enable-debug
            artifact: -debug

    env:
      JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}"
      BOOT_JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}"
      BOOT_JDK_FILENAME: "${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}"
      BOOT_JDK_URL: "${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}"
      BOOT_JDK_SHA256: "${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}"

    steps:
      - name: Checkout the source
        uses: actions/checkout@v2
        with:
          path: jdk

      - name: Restore boot JDK from cache
        id: bootjdk
        uses: actions/cache@v2
        with:
          path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1

      - name: Download boot JDK
        run: |
          mkdir -p "${HOME}/bootjdk/${BOOT_JDK_VERSION}"
          wget -O "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" "${BOOT_JDK_URL}"
          echo "${BOOT_JDK_SHA256} ${HOME}/bootjdk/${BOOT_JDK_FILENAME}" | sha256sum -c >/dev/null -
          tar -xf "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" -C "${HOME}/bootjdk/${BOOT_JDK_VERSION}"
          mv "${HOME}/bootjdk/${BOOT_JDK_VERSION}/"*/* "${HOME}/bootjdk/${BOOT_JDK_VERSION}/"
        if: steps.bootjdk.outputs.cache-hit != 'true'

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v2
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v2
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Checkout gtest sources
        uses: actions/checkout@v2
        with:
          repository: "google/googletest"
          ref: "release-${{ fromJson(needs.prerequisites.outputs.dependencies).GTEST_VERSION }}"
          path: gtest

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gcc-10=10.3.0-1ubuntu1~20.04 g++-10=10.3.0-1ubuntu1~20.04 libxrandr-dev libxtst-dev libcups2-dev libasound2-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10

      - name: Configure
        run: >
          bash configure
          --with-conf-name=linux-x64
          ${{ matrix.flags }}
          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}
          --with-version-build=0
          --with-boot-jdk=${HOME}/bootjdk/${BOOT_JDK_VERSION}
          --with-jtreg=${HOME}/jtreg
          --with-gtest=${GITHUB_WORKSPACE}/gtest
          --with-default-make-target="product-bundles test-bundles"
          --with-zlib=system
          --enable-jtreg-failure-handler
        working-directory: jdk

      - name: Build
        run: make CONF_NAME=linux-x64
        working-directory: jdk

      - name: Persist test bundles
        uses: actions/upload-artifact@v2
        with:
          name: transient_jdk-linux-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: |
            jdk/build/linux-x64/bundles/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact }}.tar.gz
            jdk/build/linux-x64/bundles/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin-tests${{ matrix.artifact }}.tar.gz

  linux_additional_build:
    name: Linux additional
    runs-on: "ubuntu-20.04"
    needs:
      - prerequisites
      - linux_x64_build
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_additional != 'false'

    strategy:
      fail-fast: false
      matrix:
        flavor:
          - hs x64 build only
          - hs x64 zero build only
          - hs x64 minimal build only
          - hs x64 optimized build only
          - hs aarch64 build only
          - hs arm build only
          - hs s390x build only
          - hs ppc64le build only
        include:
          - flavor: hs x64 build only
            flags: --enable-debug --disable-precompiled-headers
          - flavor: hs x64 zero build only
            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=zero
          - flavor: hs x64 minimal build only
            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=minimal
          - flavor: hs x64 optimized build only
            flags: --with-debug-level=optimized --disable-precompiled-headers
          - flavor: hs aarch64 build only
            flags: --enable-debug --disable-precompiled-headers
            debian-arch: arm64
            gnu-arch: aarch64
          - flavor: hs arm build only
            flags: --enable-debug --disable-precompiled-headers
            debian-arch: armhf
            gnu-arch: arm
            gnu-flavor: eabihf
          - flavor: hs s390x build only
            flags: --enable-debug --disable-precompiled-headers
            debian-arch: s390x
            gnu-arch: s390x
          - flavor: hs ppc64le build only
            flags: --enable-debug --disable-precompiled-headers
            debian-arch: ppc64el
            gnu-arch: powerpc64le

    env:
      JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}"
      BOOT_JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}"
      BOOT_JDK_FILENAME: "${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}"
      BOOT_JDK_URL: "${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}"
      BOOT_JDK_SHA256: "${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}"

    steps:
      - name: Checkout the source
        uses: actions/checkout@v2
        with:
          path: jdk

      - name: Restore boot JDK from cache
        id: bootjdk
        uses: actions/cache@v2
        with:
          path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1

      - name: Download boot JDK
        run: |
          mkdir -p "${HOME}/bootjdk/${BOOT_JDK_VERSION}"
          wget -O "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" "${BOOT_JDK_URL}"
          echo "${BOOT_JDK_SHA256} ${HOME}/bootjdk/${BOOT_JDK_FILENAME}" | sha256sum -c >/dev/null -
          tar -xf "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" -C "${HOME}/bootjdk/${BOOT_JDK_VERSION}"
          mv "${HOME}/bootjdk/${BOOT_JDK_VERSION}/"*/* "${HOME}/bootjdk/${BOOT_JDK_VERSION}/"
        if: steps.bootjdk.outputs.cache-hit != 'true'

      - name: Restore build JDK
        id: build_restore
        uses: actions/download-artifact@v2
        with:
          name: transient_jdk-linux-x64_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jdk-linux-x64
        continue-on-error: true

      - name: Restore build JDK (retry)
        uses: actions/download-artifact@v2
        with:
          name: transient_jdk-linux-x64_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jdk-linux-x64
        if: steps.build_restore.outcome == 'failure'

      - name: Unpack build JDK
        run: |
          mkdir -p "${HOME}/jdk-linux-x64/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin"
          tar -xf "${HOME}/jdk-linux-x64/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin.tar.gz" -C "${HOME}/jdk-linux-x64/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin"

      - name: Find root of build JDK image dir
        run: |
          build_jdk_root=`find ${HOME}/jdk-linux-x64/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin -name release -type f`
          echo "build_jdk_root=`dirname ${build_jdk_root}`" >> $GITHUB_ENV

      - name: Update apt
        run: sudo apt-get update

      - name: Install native host dependencies
        run: |
          sudo apt-get install gcc-10=10.3.0-1ubuntu1~20.04 g++-10=10.3.0-1ubuntu1~20.04 libxrandr-dev libxtst-dev libcups2-dev libasound2-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10
        if: matrix.debian-arch == ''

      - name: Install cross-compilation host dependencies
        run: sudo apt-get install gcc-10-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}=10.3.0-1ubuntu1~20.04cross1 g++-10-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}=10.3.0-1ubuntu1~20.04cross1
        if: matrix.debian-arch != ''

      - name: Cache sysroot
        id: cache-sysroot
        uses: actions/cache@v2
        with:
          path: ~/sysroot-${{ matrix.debian-arch }}/
          key: sysroot-${{ matrix.debian-arch }}-${{ hashFiles('jdk/.github/workflows/submit.yml') }}
        if: matrix.debian-arch != ''

      - name: Install sysroot host dependencies
        run: sudo apt-get install debootstrap qemu-user-static
        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'

      - name: Create sysroot
        run: >
          sudo qemu-debootstrap
          --arch=${{ matrix.debian-arch }}
          --verbose
          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev
          --resolve-deps
          buster
          ~/sysroot-${{ matrix.debian-arch }}
          http://httpredir.debian.org/debian/
        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'

      - name: Prepare sysroot for caching
        run: |
          sudo chroot ~/sysroot-${{ matrix.debian-arch }} symlinks -cr .
          sudo chown ${USER} -R ~/sysroot-${{ matrix.debian-arch }}
          rm -rf ~/sysroot-${{ matrix.debian-arch }}/{dev,proc,run,sys}
        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'

      - name: Configure cross compiler
        run: |
          echo "CC=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}-gcc-10" >> $GITHUB_ENV
          echo "CXX=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}-g++-10" >> $GITHUB_ENV
        if: matrix.debian-arch != ''

      - name: Configure cross specific flags
        run: >
          echo "cross_flags=
          --openjdk-target=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}
          --with-sysroot=${HOME}/sysroot-${{ matrix.debian-arch }}/
          " >> $GITHUB_ENV
        if: matrix.debian-arch != ''

      - name: Configure
        run: >
          bash configure
          --with-conf-name=linux-${{ matrix.gnu-arch }}-hotspot
          ${{ matrix.flags }}
          ${{ env.cross_flags }}
          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}
          --with-version-build=0
          --with-boot-jdk=${HOME}/bootjdk/${BOOT_JDK_VERSION}
          --with-build-jdk=${{ env.build_jdk_root }}
          --with-default-make-target="hotspot"
          --with-zlib=system
        working-directory: jdk

      - name: Build
        run: make CONF_NAME=linux-${{ matrix.gnu-arch }}-hotspot
        working-directory: jdk

  artifacts:
    name: Post-process artifacts
    runs-on: "ubuntu-20.04"
    if: always()
    continue-on-error: true
    needs:
      - prerequisites
      - linux_additional_build

    steps:
      - name: Determine current artifacts endpoint
        id: actions_runtime
        uses: actions/github-script@v3
        with:
          script: "return { url: process.env['ACTIONS_RUNTIME_URL'], token: process.env['ACTIONS_RUNTIME_TOKEN'] }"

      - name: Display current artifacts
        run: >
          curl -s -H 'Accept: application/json;api-version=6.0-preview'
          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'
          '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis/pipelines/workflows/${{ github.run_id }}/artifacts?api-version=6.0-preview'

      - name: Delete transient artifacts
        run: >
          for url in `
          curl -s -H 'Accept: application/json;api-version=6.0-preview'
          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'
          '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis/pipelines/workflows/${{ github.run_id }}/artifacts?api-version=6.0-preview' |
          jq -r -c '.value | map(select(.name|startswith("transient_"))) | .[].url'`; do
          curl -s -H 'Accept: application/json;api-version=6.0-preview'
          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'
          -X DELETE "${url}";
          done

      - name: Fetch remaining artifacts (test results)
        uses: actions/download-artifact@v2
        with:
          path: test-results

      - name: Delete remaining artifacts
        run: >
          for url in `
          curl -s -H 'Accept: application/json;api-version=6.0-preview'
          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'
          '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis/pipelines/workflows/${{ github.run_id }}/artifacts?api-version=6.0-preview' |
          jq -r -c '.value | .[].url'`; do
          curl -s -H 'Accept: application/json;api-version=6.0-preview'
          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'
          -X DELETE "${url}";
          done

      - name: Upload a combined test results artifact
        uses: actions/upload-artifact@v2
        with:
          name: test-results_${{ needs.prerequisites.outputs.bundle_id }}
          path: test-results
